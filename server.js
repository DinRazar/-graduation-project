const express = require('express');
const xlsx = require('xlsx');
const path = require('path');
const { Document, Packer, Paragraph, TextRun } = require('docx');

const app = express();
const port = 3000;

app.use(express.json()); // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
const filePath = path.join(__dirname, 'terms.xlsx');

// –ß—Ç–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
const workbook = xlsx.readFile(filePath);
const sheetName = workbook.SheetNames[0]; 
const worksheet = workbook.Sheets[sheetName];

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
const terms = xlsx.utils.sheet_to_json(worksheet);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤
app.get('/search', (req, res) => {
    const query = req.query.q.toLowerCase();
    const results = terms.filter(term => term.–¢–µ—Ä–º–∏–Ω.toLowerCase().includes(query));
    res.json(results);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–µ—Ä–º–∏–Ω—É
app.get('/term/:term', (req, res) => {
    const term = req.params.term;
    const result = terms.find(t => t.–¢–µ—Ä–º–∏–Ω === term);
    if (result) {
        res.json(result);
    } else {
        res.status(404).json({ error: '–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});

// üì• –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è DOCX
app.post('/download', (req, res) => {
    const selectedTerms = req.body; // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–µ—Ä–º–∏–Ω–æ–≤

    if (!selectedTerms || selectedTerms.length === 0) {
        return res.status(400).json({ error: '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤' });
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const doc = new Document({
        sections: [{
            properties: {},
            children: selectedTerms.map(term => 
                new Paragraph({
                    children: [
                        new TextRun({ text: `–¢–µ—Ä–º–∏–Ω: ${term.–¢–µ—Ä–º–∏–Ω}`, bold: true }),
                        new TextRun(`\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${term.–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`),
                        new TextRun(`\n–ì–û–°–¢: ${term.–ì–û–°–¢ || '–ù–µ—Ç'}`),
                        new TextRun('\n\n'),
                    ],
                })
            ),
        }],
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    Packer.toBuffer(doc).then(buffer => {
        res.setHeader('Content-Disposition', 'attachment; filename=termsoutput.docx');
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
        res.send(buffer);
    });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'public')));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
